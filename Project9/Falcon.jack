class Falcon {
    field int x;            // falcon lives in which square in the row, for out of screen checking purpose 
    field int location;     // location, for drawing purpose

    constructor Falcon new() {
        let x = 0;
        let location = Constant.DOWN_LOC_BDY() + 1;
        do draw();
        return this;
    }

    method void draw(){
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 384);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 960);
        do Memory.poke(memAddress+224, 2016);
        do Memory.poke(memAddress+256, 4080);
        do Memory.poke(memAddress+288, 7800);
        do Memory.poke(memAddress+320, 15996);
        do Memory.poke(memAddress+352, 32766);
        do Memory.poke(memAddress+384, -7225);
        do Memory.poke(memAddress+416, -6169);
        do Memory.poke(memAddress+448, -14365);
        do Memory.poke(memAddress+480, -28687);
	    return;
    }

    method void remove() {  // erase the falcon from the screen
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
	    return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void move(int dir) {
        do remove();
        if(dir = Constant.RIGHT()) {        // move right
            if( x < Constant.RIGHT_BDY()){  // within boundary
                let x = x + 1;
                let location = location + 1;
            }
        } else {
            if (dir = Constant.LEFT()) {  // move left
                if( x > 0 ){                  //  within boundary
                    let x = x -1 ;
                    let location = location - 1;
                }
            }
        } 
        do draw();
        return;
    }


    method int get_loc(){
        return location;
    }

    method void fire() {
        do Bullet.add_bullet(location - Constant.STEP(), false);
        return;
    }

}