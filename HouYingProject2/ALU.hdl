// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:

    Mux16(a = x, b[0..15] = false, sel = zx, out = zxOut);      // zero the x input? according to zx
    Mux16(a = y, b[0..15] = false, sel = zy, out = zyOut);      // zero the y input? according to zy

    Not16(in = zxOut, out = zxOutNot);                          // negate the output of zx
    Not16(in = zyOut, out = zyOutNot);                          // negate the output of zy
    Mux16(a = zxOut, b = zxOutNot, sel = nx, out = nxOut);      // negate zxOut? according to nx
    Mux16(a = zyOut, b = zyOutNot, sel = ny, out = nyOut);      // negate zyOut? according to ny

    Add16(a = nxOut, b = nyOut, out = addOut);                  // compute x + y
    And16(a = nxOut, b = nyOut, out = andOut);                  // compute x & y
    Mux16(a = andOut, b = addOut, sel = f, out = fOut);         // if f is 0, compute fOut = x & y; if f is 1, compute fOut = x + y

    Not16(in = fOut, out = fOutNot);                            // negate the output of f
    
    // negate the output of f? according to no. This generates the out output of ALU
    // out[15] indicates if the out output is negative
    // need out[0..7] and out[8..15] to calculate zr
    Mux16(a = fOut, b = fOutNot, sel = no, out = out, out[15] = ng, out[0..7] = lowerOutBits, out[8..15] = upperOutBits);      

    Or8Way(in = lowerOutBits, out = lowerContain1);             // the lower 8 bits of the out output contain 1? 
    Or8Way(in = upperOutBits, out = upperContain1);             // the upper 8 bits of the out output contain 1? 
    Or(a = lowerContain1, b = upperContain1, out = zrNot);      // the out output contains 1? 
    Not(in = zrNot, out = zr);                                  // the out output is 0?
}